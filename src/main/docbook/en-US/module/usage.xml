<?xml version="1.0" encoding="UTF-8"?>
<!--
 * Copyright (c) 2011 Michael Mimo Moratti.
 *
 * Michael Mimo Moratti licenses this file to you under the Apache License, version 2.0
 * (the "License"); you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at:
 *     http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
-->
<!DOCTYPE preface PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.docbook.org/xml/4.5/docbookx.dtd" [
<!ENTITY % CustomDTD SYSTEM "../custom.dtd">
%CustomDTD; 
]>
<chapter id="usage">
  <title>Usage</title>
  <para>
  	The basic usage is identical to all JBoss Netty codecs. You have different Handlers available 
  	for message encoding, decoding. In addition to that we also provide handlers that allow the user
  	to abstract from protocol details like the chunked transfer of all message bodies. We recommend to
  	read up on <ulink url="http://www.jboss.org/netty"><literal>JBoss Netty</literal></ulink> 
  	in order to successfully use this codec.
  </para>

  <section>
    <title>Available Handlers</title>
    <para>
	  You have a set of Handlers available that will encode and decode ICAP messages. These are the basic handlers
	  which are required in order to use the ICAP codec. Since ICAP encapsulated HTTP bodies are always chunked you 
	  can use the aggregation and separation handlers to abstract from this protocol overhead.
      alongside the source code are examples that suggest how to use the provided handlers. The examples can be found in the package:
      <classname>ch.mimo.netty.example.icap.*</classname> All examples show how to create a server and client handler pipeline. It is
      recommended to construct client and server pipelines according to these examples.
    </para>
    <para>
      The simple example shows how to best use the provided handlers. It implicitly uses the aggregation and separation
      handlers which take care of all message body transfer details. The below depicted pipelines are client and server
      pipelines:
    </para>
	<para>
	  Note that at the end of each Pipeline is either a Server or Client handler that represents the so called Hub of the
	  pipeline. This handler is responsible to receive messages process them and send the response back into the pipeline.
	</para>
  </section>
  <section>
  	<title>Client handler pipeline</title>
  	<para>
  	  A straight forward client handler pipeline consists of:
  	  <itemizedlist>
  	  	<listitem>
  	  		<para>
		  	  &IcapRequestEncoder; The Encoder will take a &IcapRequest; or &IcapChunk; and transfer them
		  	  into a ASCII string that represents the ICAP protocol. 	  			
  	  		</para>
  	  	</listitem>
  	  	<listitem>
  	  		<para>
		  	  &IcapResponseDecoder; The Decoder produces an ICAP protocol ASCII string as input and
		  	  creates &IcapRequest; and &IcapChunk; instances. 		  			
  	  		</para>
  	  	</listitem>
  	  </itemizedlist>
  	</para>
    <programlisting>@Override
	public ChannelPipeline getPipeline() throws Exception {
		ChannelPipeline pipeline = pipeline();
		pipeline.addLast("encoder",new IcapRequestEncoder());
		pipeline.addLast("decoder",new IcapResponseDecoder());
		pipeline.addLast("handler",new IcapClientHandler());
		return pipeline;
	}</programlisting>
  	<para>
  	  You also have the possibility to abstract from the tedious message body chunk handling and
  	  add two additional handlers which will take care of the chunked message body. It is important
  	  to understand that in this scenario (if you plan to send a message body) you have to attach the
  	  message body to the respective HTTP request or response.
  	  <itemizedlist>
  	  	<listitem>
  	  		<para>
		  	  &IcapChunkSeparator; This handler is useful when you create an &IcapRequest; instance
		  	  containing HTTP request/response and a body encapsulated with one of the http messages.
		  	  The responsibility of this handler is then to extract the message body and send it as
		  	  chunks to the receiving side.  			
  	  		</para>
  	  	</listitem>
  	  	<listitem>
  	  		<para>
		  	  &IcapChunkAggregator; This handler is useful when you don't want to handle individual 
		  	  &IcapChunk; instances but rather receive a combined &IcapResponse;  	  			
  	  		</para>
  	  	</listitem>
  	  </itemizedlist>
  	</para>
    <programlisting>@Override
	public ChannelPipeline getPipeline() throws Exception {
		ChannelPipeline pipeline = pipeline();
		pipeline.addLast("encoder",new IcapRequestEncoder());
		pipeline.addLast("chunkSeparator",new IcapChunkSeparator(4096));
		pipeline.addLast("decoder",new IcapResponseDecoder());
		pipeline.addLast("chunkAggregator",new IcapChunkAggregator(4096));
		pipeline.addLast("handler",new IcapClientHandler());
		return pipeline;
	}</programlisting>
  </section>
  <section>
    <title>Server handler pipeline</title>
    <para>
    	A straight forward Server pipeline consists of:
  	  <itemizedlist>
  	  	<listitem>
  	  		<para>
		  	  &IcapRequestDecoder; The Decoder produces an ICAP protocol ASCII string as input and
		  	  creates &IcapRequest; and &IcapChunk; instances. 	  			
  	  		</para>
  	  	</listitem>
  	  	<listitem>
  	  		<para>
		  	  &IcapResponseEncoder; The Encoder will take a &IcapResponse; or &IcapChunk; and transfer them
		  	  into a ASCII string that represents the ICAP protocol. 	  			
  	  		</para>
  	  	</listitem>
  	  </itemizedlist>
    </para>
    <programlisting>@Override
    public ChannelPipeline getPipeline() throws Exception {
		ChannelPipeline pipeline = pipeline();
		pipeline.addLast("decoder",new IcapRequestDecoder());
		pipeline.addLast("encoder",new IcapResponseEncoder());
		pipeline.addLast("handler",new IcapServerHandler());
		return pipeline;
    }</programlisting>
    <para>
      Analog to the Client example you also have the possibility to abstract from the tedious message 
      body chunk handling and add two additional handlers which will take care of the chunked message body. 
      It is important to understand that in this scenario (if you plan to send a message body) you have to 
      attach the message body to the respective HTTP request or response.
  	  <itemizedlist>
  	  	<listitem>
  	  		<para>
		  	  &IcapChunkSeparator; This handler is useful when you create an &IcapRequest; instance
		  	  containing HTTP request/response and a body encapsulated with one of the HTTP messages.
		  	  The responsibility of this handler is then to extract the message body and send it as
		  	  chunks to the receiving side.  			
  	  		</para>
  	  	</listitem>
  	  	<listitem>
  	  		<para>
		  	  &IcapChunkAggregator; This handler is useful when you don't want to handle individual 
		  	  &IcapChunk; instances but rather receive a combined &IcapResponse;  	  			
  	  		</para>
  	  	</listitem>
  	  </itemizedlist>
    </para>
    <programlisting>@Override
    public ChannelPipeline getPipeline() throws Exception {
		ChannelPipeline pipeline = pipeline();
		pipeline.addLast("decoder",new IcapRequestDecoder());
		pipeline.addLast("chunkAggregator",new IcapChunkAggregator(4096));
		pipeline.addLast("encoder",new IcapResponseEncoder());
		pipeline.addLast("chunkSeparator",new IcapChunkSeparator(4096));
		pipeline.addLast("handler",new IcapServerHandler());
		return pipeline;
    }</programlisting>
  </section>
  <section>
  	<title>Preview</title>
  	<para>
  	  The ICAP protocol supports a special scenario whereby the client is enabled to send a pre-defined portion of the 
  	  HTTP message body to the server and wait for further instructions. There server
  	  can the ask for more data by responding with <code>100 Continue</code> which tells the client to send the rest of the
  	  message body, or with <code>204 No Content</code> (If the client allows this!) and the client knows ok no modification
  	  was made on the request. The Server is also capable of sending a normal <code>200 OK</code> message back to the client.
  	  This circumstance complicates the protocol handling for a server or client. We have therefore made a simple example that
  	  can be found under <classname>ch.mimo.netty.example.icap.preview.*</classname> which will help to understand the inner
  	  workings of such a preview request for client and server.
  	</para>
  	<para>
  	  In order to detect whether a &IcapRequest; or &IcapChunk; belongs to a preview message we have added getters on each object
  	  that indicate if a request or chunk participates on a preview interaction.
  	</para>
  	<programlisting>/**
  	* @return whether this message is a preview of the actual message.
  	*/
  	boolean isPreviewMessage();</programlisting>
  	<programlisting>/**
	 * @return boolean true if this chunk is preview.
	 */
	boolean isPreviewChunk();</programlisting>
	<para>
	  The best way to handler preview requests is configuring a &IcapChunkAggregator; into your pipeline. This will guarantee that
	  once you have sent the <code>100 Continue</code> response you will get the same &IcapRequest; instance containing the rest
	  of the body that was not sent in the preview mode.
	</para>
  </section>
  <section>
  	<title>Abstraction handlers and the NIO threading paradigm</title>
  	<para>
  	  You cannot use the NIO (non blocking) threading paradigm togehther with the two abstaction handlers &IcapChunkAggregator; and &IcapChunkSeparator;.
  	  Both handlers are statefull and consider to be run by the same thread for one request only. As soon you will switch to NIO message content will
  	  be exchanged between requests. In other words the two handlers are not threadsafe. The roadmap contains the enablement of both handlers to be NIO
  	  capable.
  	</para>
  </section>
</chapter>
