<?xml version="1.0" encoding="UTF-8"?>
<!--
 * Copyright (c) 2011 Michael Mimo Moratti.
 *
 * Michael Mimo Moratti licenses this file to you under the Apache License, version 2.0
 * (the "License"); you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at:
 *     http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
-->
<!DOCTYPE preface PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.docbook.org/xml/4.5/docbookx.dtd" [
<!ENTITY % CustomDTD SYSTEM "../custom.dtd">
%CustomDTD; 
]>
<chapter id="usage">
  <title>Usage</title>
  <para>
  	The basic usage is identical to all JBoss Netty codecs. You have different Handlers available 
  	for message encoding, decoding and message consolidation. As a prerequisite it is sensible to
  	read up on <ulink url="http://www.jboss.org/netty"><literal>JBoss Netty</literal></ulink> 
  	in order to successfully this codec.
  </para>

  <section>
    <title>Available Handlers</title>
    <para>
	  You have a set of Handlers available that will encode and decode ICAP messages. These are the basic handlers
	  which are required in order to use the ICAP codec. Since ICAP encapsulated HTTP bodies are always chunked you 
	  can use the aggregation and separation handlers to abstract from this protocol overhead.
      alongside the source code are examples that suggest how to use the provided handlers. The examples can be found in the package:
      <classname>ch.mimo.netty.example.icap.*</classname> All examples show how to create a server and client handler pipeline. It is
      recommended to construct client and server pipelines according to the examples.
    </para>
    <para>
      The simple example shows how to best use the provided handlers. It implicitly uses the aggregation and separation
      handlers which take care of all message body transfer details. The below depicted piplelines are client and server
      pipelines:
    </para>
    <programlisting>
	@Override
	public ChannelPipeline getPipeline() throws Exception {
		ChannelPipeline pipeline = pipeline();
    	pipeline.addLast("encoder",new IcapRequestEncoder());
    	pipeline.addLast("chunkSeparator",new IcapChunkSeparator(4096));
      	pipeline.addLast("decoder",new IcapResponseDecoder());
      	pipeline.addLast("chunkAggregator",new IcapChunkAggregator(4096));
      	pipeline.addLast("handler",new IcapClientHandler());
      	return pipeline;
	}
    </programlisting>
    <programlisting>
    @Override
    public ChannelPipeline getPipeline() throws Exception {
        ChannelPipeline pipeline = pipeline();
    	pipeline.addLast("decoder",new IcapRequestDecoder());
    	pipeline.addLast("chunkAggregator",new IcapChunkAggregator(4096));
    	pipeline.addLast("encoder",new IcapResponseEncoder());
    	pipeline.addLast("chunkSeparator",new IcapChunkSeparator(4096));
    	pipeline.addLast("handler",new IcapServerHandler());
        return pipeline;
    }
    </programlisting>
  </section>
</chapter>
